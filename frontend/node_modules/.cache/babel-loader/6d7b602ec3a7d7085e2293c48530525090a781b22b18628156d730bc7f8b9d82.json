{"ast":null,"code":"var _jsxFileName = \"F:\\\\OOP\\\\Project\\\\mealbridge\\\\MEALBRIDGE\\\\MEALBRIDGE\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.js\";\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  role\n}) => {\n  const userStr = localStorage.getItem('user');\n  const token = localStorage.getItem('token');\n  if (!token || !userStr) {\n    // No token or user data, redirect to login\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n  try {\n    const user = JSON.parse(userStr);\n    if (user.role !== role) {\n      // User trying to access wrong dashboard, redirect to their correct dashboard\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: `/${user.role}/dashboard`,\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  } catch (error) {\n    // Invalid user data in localStorage, clear and redirect to login\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","jsxDEV","_jsxDEV","ProtectedRoute","role","userStr","localStorage","getItem","token","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","user","JSON","parse","error","removeItem","_c","$RefreshReg$"],"sources":["F:/OOP/Project/mealbridge/MEALBRIDGE/MEALBRIDGE/frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\n\nconst ProtectedRoute = ({ role }) => {\n  const userStr = localStorage.getItem('user');\n  const token = localStorage.getItem('token');\n\n  if (!token || !userStr) {\n    // No token or user data, redirect to login\n    return <Navigate to=\"/login\" replace />;\n  }\n\n  try {\n    const user = JSON.parse(userStr);\n    if (user.role !== role) {\n      // User trying to access wrong dashboard, redirect to their correct dashboard\n      return <Navigate to={`/${user.role}/dashboard`} replace />;\n    }\n    return <Outlet />;\n  } catch (error) {\n    // Invalid user data in localStorage, clear and redirect to login\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    return <Navigate to=\"/login\" replace />;\n  }\n};\n\nexport default ProtectedRoute;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EACnC,MAAMC,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC5C,MAAMC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI,CAACC,KAAK,IAAI,CAACH,OAAO,EAAE;IACtB;IACA,oBAAOH,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;EAEA,IAAI;IACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACZ,OAAO,CAAC;IAChC,IAAIU,IAAI,CAACX,IAAI,KAAKA,IAAI,EAAE;MACtB;MACA,oBAAOF,OAAA,CAACH,QAAQ;QAACU,EAAE,EAAE,IAAIM,IAAI,CAACX,IAAI,YAAa;QAACM,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC5D;IACA,oBAAOZ,OAAA,CAACF,MAAM;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACAZ,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;IAChCb,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC;IAC/B,oBAAOjB,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;AACF,CAAC;AAACM,EAAA,GAtBIjB,cAAc;AAwBpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}